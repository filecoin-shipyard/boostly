// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package boostly

import (
	"fmt"
	"io"
	"math"
	"sort"

	abi "github.com/filecoin-project/go-state-types/abi"
	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *DealStatusRequest) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{162}); err != nil {
		return err
	}

	// t.DealUUID (uuid.UUID) (array)
	if len("DealUUID") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"DealUUID\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("DealUUID"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("DealUUID")); err != nil {
		return err
	}

	if len(t.DealUUID) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.DealUUID was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.DealUUID))); err != nil {
		return err
	}

	if _, err := cw.Write(t.DealUUID[:]); err != nil {
		return err
	}

	// t.Signature (crypto.Signature) (struct)
	if len("Signature") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Signature\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Signature"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Signature")); err != nil {
		return err
	}

	if err := t.Signature.MarshalCBOR(cw); err != nil {
		return err
	}
	return nil
}

func (t *DealStatusRequest) UnmarshalCBOR(r io.Reader) (err error) {
	*t = DealStatusRequest{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("DealStatusRequest: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.DealUUID (uuid.UUID) (array)
		case "DealUUID":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.ByteArrayMaxLen {
				return fmt.Errorf("t.DealUUID: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra != 16 {
				return fmt.Errorf("expected array to have 16 elements")
			}

			t.DealUUID = [16]uint8{}

			if _, err := io.ReadFull(cr, t.DealUUID[:]); err != nil {
				return err
			}
			// t.Signature (crypto.Signature) (struct)
		case "Signature":

			{

				if err := t.Signature.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Signature: %w", err)
				}

			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *DealStatusResponse) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{166}); err != nil {
		return err
	}

	// t.Error (string) (string)
	if len("Error") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Error\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Error"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Error")); err != nil {
		return err
	}

	if len(t.Error) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Error was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Error))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Error)); err != nil {
		return err
	}

	// t.DealUUID (uuid.UUID) (array)
	if len("DealUUID") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"DealUUID\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("DealUUID"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("DealUUID")); err != nil {
		return err
	}

	if len(t.DealUUID) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.DealUUID was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.DealUUID))); err != nil {
		return err
	}

	if _, err := cw.Write(t.DealUUID[:]); err != nil {
		return err
	}

	// t.IsOffline (bool) (bool)
	if len("IsOffline") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"IsOffline\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("IsOffline"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("IsOffline")); err != nil {
		return err
	}

	if err := cbg.WriteBool(w, t.IsOffline); err != nil {
		return err
	}

	// t.DealStatus (boostly.DealStatus) (struct)
	if len("DealStatus") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"DealStatus\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("DealStatus"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("DealStatus")); err != nil {
		return err
	}

	if err := t.DealStatus.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.TransferSize (uint64) (uint64)
	if len("TransferSize") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"TransferSize\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("TransferSize"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("TransferSize")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.TransferSize)); err != nil {
		return err
	}

	// t.NBytesReceived (uint64) (uint64)
	if len("NBytesReceived") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"NBytesReceived\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("NBytesReceived"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("NBytesReceived")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.NBytesReceived)); err != nil {
		return err
	}

	return nil
}

func (t *DealStatusResponse) UnmarshalCBOR(r io.Reader) (err error) {
	*t = DealStatusResponse{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("DealStatusResponse: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Error (string) (string)
		case "Error":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Error = string(sval)
			}
			// t.DealUUID (uuid.UUID) (array)
		case "DealUUID":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.ByteArrayMaxLen {
				return fmt.Errorf("t.DealUUID: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra != 16 {
				return fmt.Errorf("expected array to have 16 elements")
			}

			t.DealUUID = [16]uint8{}

			if _, err := io.ReadFull(cr, t.DealUUID[:]); err != nil {
				return err
			}
			// t.IsOffline (bool) (bool)
		case "IsOffline":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajOther {
				return fmt.Errorf("booleans must be major type 7")
			}
			switch extra {
			case 20:
				t.IsOffline = false
			case 21:
				t.IsOffline = true
			default:
				return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
			}
			// t.DealStatus (boostly.DealStatus) (struct)
		case "DealStatus":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					t.DealStatus = new(DealStatus)
					if err := t.DealStatus.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling t.DealStatus pointer: %w", err)
					}
				}

			}
			// t.TransferSize (uint64) (uint64)
		case "TransferSize":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.TransferSize = uint64(extra)

			}
			// t.NBytesReceived (uint64) (uint64)
		case "NBytesReceived":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.NBytesReceived = uint64(extra)

			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *DealStatus) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{167}); err != nil {
		return err
	}

	// t.Error (string) (string)
	if len("Error") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Error\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Error"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Error")); err != nil {
		return err
	}

	if len(t.Error) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Error was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Error))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Error)); err != nil {
		return err
	}

	// t.Status (string) (string)
	if len("Status") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Status\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Status"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Status")); err != nil {
		return err
	}

	if len(t.Status) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Status was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Status))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Status)); err != nil {
		return err
	}

	// t.Proposal (market.DealProposal) (struct)
	if len("Proposal") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Proposal\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Proposal"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Proposal")); err != nil {
		return err
	}

	if err := t.Proposal.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.PublishCid (cid.Cid) (struct)
	if len("PublishCid") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"PublishCid\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("PublishCid"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("PublishCid")); err != nil {
		return err
	}

	if t.PublishCid == nil {
		if _, err := cw.Write(cbg.CborNull); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteCid(cw, *t.PublishCid); err != nil {
			return xerrors.Errorf("failed to write cid field t.PublishCid: %w", err)
		}
	}

	// t.ChainDealID (abi.DealID) (uint64)
	if len("ChainDealID") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"ChainDealID\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("ChainDealID"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("ChainDealID")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.ChainDealID)); err != nil {
		return err
	}

	// t.SealingStatus (string) (string)
	if len("SealingStatus") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"SealingStatus\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("SealingStatus"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("SealingStatus")); err != nil {
		return err
	}

	if len(t.SealingStatus) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.SealingStatus was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.SealingStatus))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.SealingStatus)); err != nil {
		return err
	}

	// t.SignedProposalCid (cid.Cid) (struct)
	if len("SignedProposalCid") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"SignedProposalCid\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("SignedProposalCid"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("SignedProposalCid")); err != nil {
		return err
	}

	if err := cbg.WriteCid(cw, t.SignedProposalCid); err != nil {
		return xerrors.Errorf("failed to write cid field t.SignedProposalCid: %w", err)
	}

	return nil
}

func (t *DealStatus) UnmarshalCBOR(r io.Reader) (err error) {
	*t = DealStatus{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("DealStatus: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Error (string) (string)
		case "Error":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Error = string(sval)
			}
			// t.Status (string) (string)
		case "Status":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Status = string(sval)
			}
			// t.Proposal (market.DealProposal) (struct)
		case "Proposal":

			{

				if err := t.Proposal.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Proposal: %w", err)
				}

			}
			// t.PublishCid (cid.Cid) (struct)
		case "PublishCid":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					c, err := cbg.ReadCid(cr)
					if err != nil {
						return xerrors.Errorf("failed to read cid field t.PublishCid: %w", err)
					}

					t.PublishCid = &c
				}

			}
			// t.ChainDealID (abi.DealID) (uint64)
		case "ChainDealID":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.ChainDealID = abi.DealID(extra)

			}
			// t.SealingStatus (string) (string)
		case "SealingStatus":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.SealingStatus = string(sval)
			}
			// t.SignedProposalCid (cid.Cid) (struct)
		case "SignedProposalCid":

			{

				c, err := cbg.ReadCid(cr)
				if err != nil {
					return xerrors.Errorf("failed to read cid field t.SignedProposalCid: %w", err)
				}

				t.SignedProposalCid = c

			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
